/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Burner {
  export type Burn_Struct = {
    user: AddressLike;
    amount: BigNumberish;
    completed: boolean;
  };

  export type Burn_StructOutput = [
    user: string,
    amount: bigint,
    completed: boolean
  ] & { user: string; amount: bigint; completed: boolean };
}

export interface BurnerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_acceptGov"
      | "_setPendingGov"
      | "balance"
      | "burn"
      | "burns"
      | "deposit"
      | "emergencyWithdraw"
      | "flip"
      | "getAllBurns"
      | "getBurns"
      | "gov"
      | "govWithdraw"
      | "pendingGov"
      | "redeem"
      | "redeemable"
      | "reedemed"
      | "stflip"
      | "subtract"
      | "sums"
      | "totalPendingBurns"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Burn" | "NewGov" | "NewPendingGov"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_acceptGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingGov",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "burns", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "flip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllBurns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reedemed", values?: undefined): string;
  encodeFunctionData(functionFragment: "stflip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subtract",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sums", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalPendingBurns",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBurns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reedemed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stflip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subtract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingBurns",
    data: BytesLike
  ): Result;
}

export namespace BurnEvent {
  export type InputTuple = [amount: BigNumberish, burn_id: BigNumberish];
  export type OutputTuple = [amount: bigint, burn_id: bigint];
  export interface OutputObject {
    amount: bigint;
    burn_id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGovEvent {
  export type InputTuple = [oldGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [oldGov: string, newGov: string];
  export interface OutputObject {
    oldGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingGovEvent {
  export type InputTuple = [
    oldPendingGov: AddressLike,
    newPendingGov: AddressLike
  ];
  export type OutputTuple = [oldPendingGov: string, newPendingGov: string];
  export interface OutputObject {
    oldPendingGov: string;
    newPendingGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Burner extends BaseContract {
  connect(runner?: ContractRunner | null): Burner;
  waitForDeployment(): Promise<this>;

  interface: BurnerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _acceptGov: TypedContractMethod<[], [void], "nonpayable">;

  _setPendingGov: TypedContractMethod<
    [pendingGov_: AddressLike],
    [void],
    "nonpayable"
  >;

  balance: TypedContractMethod<[], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;

  burns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        user: string;
        amount: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;

  flip: TypedContractMethod<[], [string], "view">;

  getAllBurns: TypedContractMethod<[], [Burner.Burn_StructOutput[]], "view">;

  getBurns: TypedContractMethod<
    [account: AddressLike],
    [[Burner.Burn_StructOutput[], bigint[], boolean[]]],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  govWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingGov: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<[burn_id: BigNumberish], [void], "nonpayable">;

  redeemable: TypedContractMethod<[burn_id: BigNumberish], [boolean], "view">;

  reedemed: TypedContractMethod<[], [bigint], "view">;

  stflip: TypedContractMethod<[], [string], "view">;

  subtract: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  sums: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  totalPendingBurns: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_acceptGov"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setPendingGov"
  ): TypedContractMethod<[pendingGov_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "burns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        user: string;
        amount: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flip"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllBurns"
  ): TypedContractMethod<[], [Burner.Burn_StructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBurns"
  ): TypedContractMethod<
    [account: AddressLike],
    [[Burner.Burn_StructOutput[], bigint[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "govWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingGov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[burn_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemable"
  ): TypedContractMethod<[burn_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "reedemed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stflip"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subtract"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "sums"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPendingBurns"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "NewGov"
  ): TypedContractEvent<
    NewGovEvent.InputTuple,
    NewGovEvent.OutputTuple,
    NewGovEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingGov"
  ): TypedContractEvent<
    NewPendingGovEvent.InputTuple,
    NewPendingGovEvent.OutputTuple,
    NewPendingGovEvent.OutputObject
  >;

  filters: {
    "Burn(uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "NewGov(address,address)": TypedContractEvent<
      NewGovEvent.InputTuple,
      NewGovEvent.OutputTuple,
      NewGovEvent.OutputObject
    >;
    NewGov: TypedContractEvent<
      NewGovEvent.InputTuple,
      NewGovEvent.OutputTuple,
      NewGovEvent.OutputObject
    >;

    "NewPendingGov(address,address)": TypedContractEvent<
      NewPendingGovEvent.InputTuple,
      NewPendingGovEvent.OutputTuple,
      NewPendingGovEvent.OutputObject
    >;
    NewPendingGov: TypedContractEvent<
      NewPendingGovEvent.InputTuple,
      NewPendingGovEvent.OutputTuple,
      NewPendingGovEvent.OutputObject
    >;
  };
}
